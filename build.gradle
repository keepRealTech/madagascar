plugins {
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'org.springframework.boot' version '2.1.4.RELEASE' apply false
    id 'org.hidetake.swagger.generator' version '2.18.2' apply false
    id 'com.google.protobuf' version '0.8.12' apply false
    id 'com.palantir.docker' version '0.22.1' apply false
}

allprojects {
    group = 'com.keepreal.madagascar'

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
}

ext['baobob.version'] = '1.0.2'
ext['indri.version'] = '1.0.0'
ext['coua.version'] = '1.0.3'
ext['fossa.version'] = '1.0.0'
ext['lemur.version'] = '1.0.5'
ext['tenrecs.version'] = '1.0.0'
ext['brookesia.version'] = '1.0.0'

subprojects {
    apply plugin: 'io.spring.dependency-management'

    ext['lombok.version'] = '1.18.6'
    ext['spring-kafka.version'] = '2.2.4.RELEASE'
    ext['jackson.version'] = '2.9.5'
    ext['jersey.version'] = '2.22.2'
    ext['swagger.client.annotation.version'] = '2.0.0'
    ext['swagger.server.annotation.version'] = '1.5.22'
    ext['swagger.codegen.version'] = '4.2.3'
    ext['protobuf-java.version'] = '3.8.0'
    ext['grpc.springboot.version'] = '3.5.3'
    ext['boringssl.version'] = '2.0.22.Final'
    ext['redisson.version'] = '3.11.0'
    ext['micrometer.version'] = '1.4.0'
    ext['jwt.version'] = '0.9.1'
    ext['oauth.boot.version'] = '2.1.4.RELEASE'
    ext['resteasy.version'] = '3.6.3.Final'
    ext['springCloud.version'] = 'Greenwich.SR1'
    ext['reactive-grpc.version'] = '0.10.0'
    ext['ehcache.version'] = '3.8.1'
    ext['openservices.version'] = '1.8.4.Final'

    project.version = rootProject.findProperty("${project.name}.version") ?: 'latest'

    // Applies for java services. Another possible value could be JavaLibraryPlugin.
    plugins.withType(JavaPlugin) {
        compileJava {
            sourceCompatibility = 1.8
            options.compilerArgs << "-Xlint:all"
        }

        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }
    }

    // Defines docker tasks
    plugins.withId('com.palantir.docker') {
        task unpack(type: Copy) {
            dependsOn bootJar
            delete("build/dependency")
            from(zipTree(tasks.bootJar.outputs.files.singleFile))
            into("build/dependency")
        }

        docker {
            name "registry.cn-beijing.aliyuncs.com/keepreal/${project.name.replace('_','-')}:$project.version"
            dockerfile file("$projectDir/dockerfile")
            files "$projectDir/start.sh", "$projectDir/healthcheck.sh"
            copySpec.from(tasks.unpack.outputs).into("dependency")
            buildArgs(['DEPENDENCY': "dependency"])
            pull true
        }
    }

    // Defines behaviors of gradle protoc and grpc plugin
    plugins.withId('com.google.protobuf') {
        sourceSets.main.java.srcDirs +='build/generated/source/proto/main/java'
        protobuf {
            protoc {
                artifact = "com.google.protobuf:protoc:3.8.0"
            }
            if (project.findProperty('grpcEnabled') == 'true') {
                sourceSets.main.java.srcDirs +='build/generated/source/proto/main/java'
                sourceSets.main.java.srcDirs +='build/generated/source/proto/main/grpc'
                sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/reactor'
                plugins {
                    grpc {
                        artifact = 'io.grpc:protoc-gen-grpc-java:1.20.0'
                    }
                    if (project.findProperty('grpcMode') == 'reactive') {
                        reactor {
                            artifact = "com.salesforce.servicelibs:reactor-grpc:0.10.0:jdk8@jar"
                        }
                    }
                }
                generateProtoTasks {
                    all()*.plugins {
                        grpc {}
                        if (project.findProperty('grpcMode') == 'reactive') {
                            reactor {}
                        }
                    }
                }
            }
        }
    }

    // Defines the swagger generator behavior
    plugins.withId('org.hidetake.swagger.generator') {

    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${ext['springCloud.version']}"
            mavenBom "io.projectreactor:reactor-bom:Bismuth-RELEASE"
        }

        dependencies {
            dependency "org.projectlombok:lombok:${ext['lombok.version']}"
            dependency "org.springframework.kafka:spring-kafka:${ext['spring-kafka.version']}"
            dependency "com.fasterxml.jackson.core:jackson-core:${ext['jackson.version']}"
            dependency "com.fasterxml.jackson.core:jackson-annotations:${ext['jackson.version']}"
            dependency "com.fasterxml.jackson.core:jackson-databind:${ext['jackson.version']}"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-joda:${ext['jackson.version']}"
            dependency "org.glassfish.jersey.core:jersey-client:${ext['jersey.version']}"
            dependency "org.glassfish.jersey.media:jersey-media-multipart:${ext['jersey.version']}"
            dependency "org.glassfish.jersey.media:jersey-media-json-jackson:${ext['jersey.version']}"
            dependency "com.google.protobuf:protobuf-java:${ext['protobuf-java.version']}"
            dependency "com.salesforce.servicelibs:reactor-grpc-stub:${ext['reactive-grpc.version']}"
            dependency "io.github.lognet:grpc-spring-boot-starter:${ext['grpc.springboot.version']}"
            dependency "org.openapitools:openapi-generator-cli:${ext['swagger.codegen.version']}"
            dependency "io.swagger.core.v3:swagger-annotations:${ext['swagger.client.annotation.version']}"
            dependency "io.swagger:swagger-annotations:${ext['swagger.server.annotation.version']}"
            dependency "io.netty:netty-tcnative-boringssl-static:${ext['boringssl.version']}"
            dependency "org.redisson:redisson-spring-boot-starter:${ext['redisson.version']}"
            dependency "io.micrometer:micrometer-registry-prometheus:${ext['micrometer.version']}"
            dependency "io.jsonwebtoken:jjwt:${ext['jwt.version']}"
            dependency "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${ext['oauth.boot.version']}"
            dependency "org.jboss.resteasy:resteasy-multipart-provider:${ext['resteasy.version']}"
            dependency "org.jboss.resteasy:resteasy-jackson-provider:${ext['resteasy.version']}"
            dependency "org.jboss.resteasy:resteasy-client:${ext['resteasy.version']}"
            dependency "org.jboss.resteasy:resteasy-jaxrs:${ext['resteasy.version']}"
            dependency "org.openapitools:jackson-databind-nullable:0.2.1"
            dependency "org.ehcache:ehcache:${ext['ehcache.version']}"
            dependency "com.aliyun.openservices:ons-client:${ext['openservices.version']}"
            dependency "io.opentracing.contrib:opentracing-spring-jaeger-web-starter:3.1.1"
            dependency "io.opentracing.contrib:opentracing-grpc:0.2.1"
        }
    }
}
