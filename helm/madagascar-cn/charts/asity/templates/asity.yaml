apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: asity
  namespace: {{ .Values.global.common_configs.namespace }}
spec:
  replicas: {{ .Values.global.common_configs.replicas.asity }}
  selector:
    matchLabels:
      app: asity
  serviceName: asity
  template:
    metadata:
      annotations:
        config.linkerd.io/init-image: registry-vpc.cn-beijing.aliyuncs.com/keepreal/linkerd-proxy-init
        config.linkerd.io/init-image-version: v1.3.2
        config.linkerd.io/proxy-image: registry-vpc.cn-beijing.aliyuncs.com/keepreal/linkerd-proxy
        config.linkerd.io/proxy-image-version: stable-2.7.1
        linkerd.io/inject: enabled
      labels:
        app: asity
    spec:
      initContainers:
        - name: sysctl
          command:
            - sh
            - -c
            - sysctl -w net.ipv4.tcp_keepalive_time=600; sysctl -w net.ipv4.tcp_keepalive_intvl=30; sysctl -w net.ipv4.tcp_keepalive_probes=10
          image: alpine:3.6
          imagePullPolicy: IfNotPresent
          resources: {}
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
      imagePullSecrets:
        - name: {{ .Values.global.acr.acr_secret_name }}
      containers:
        - name: asity
          image: {{ .Values.global.images.asity.name }}:{{ .Values.global.images.asity.tag }}
          imagePullPolicy: {{ .Values.global.images.asity.imagePullPolicy }}
          envFrom:
            - configMapRef:
                name: asity
          env:
            - name: RONGCLOUD_APPKEY
              valueFrom:
                secretKeyRef:
                  name: rongcloud
                  key: app-key
            - name: RONGCLOUD_APPSECRET
              valueFrom:
                secretKeyRef:
                  name: rongcloud
                  key: app-secret
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                secretKeyRef:
                  key: asity-connection-string
                  name: aliyun-rdb
            - name: ROCKETMQ_NOTIFICATION_ACCESSKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-key
            - name: ROCKETMQ_NOTIFICATION_SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-secret
            - name: ROCKETMQ_NOTIFICATION_NAMESRVADDR
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: name-server
            - name: ROCKETMQ_ISLAND_ACCESSKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-key
            - name: ROCKETMQ_ISLAND_SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-secret
            - name: ROCKETMQ_ISLAND_NAMESRVADDR
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: name-server
            - name: ROCKETMQ_USER_ACCESSKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-key
            - name: ROCKETMQ_USER_SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-secret
            - name: ROCKETMQ_USER_NAMESRVADDR
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: name-server
            - name: ROCKETMQ_CHAT_ACCESSKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-key
            - name: ROCKETMQ_CHAT_SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: access-secret
            - name: ROCKETMQ_CHAT_NAMESRVADDR
              valueFrom:
                secretKeyRef:
                  name: aliyun-rmq
                  key: name-server
            - name: RESTART
              value: "2"
          resources:
            limits:
              memory: {{ .Values.common_configs.memory }}
            requests:
              cpu: {{ .Values.common_configs.cpu }}
              memory: {{ .Values.common_configs.memory }}
          ports:
            - containerPort: 12007
              name: asity-grpc
        {{ if .Values.deploy.opentracing.enable_jaeger }}
        - name: jaeger-agent
          image: jaegertracing/jaeger-agent:1.17.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5775
              name: zk-compact-trft
              protocol: UDP
            - containerPort: 5778
              name: config-rest
              protocol: TCP
            - containerPort: 6831
              name: jg-compact-trft
              protocol: UDP
            - containerPort: 6832
              name: jg-binary-trft
              protocol: UDP
            - containerPort: 14271
              name: admin-http
              protocol: TCP
          args:
            - --reporter.tchannel.host-port=simplest-collector-headless.keepreal-prod.svc:14267
            - --reporter.type=tchannel
        {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: asity
spec:
  type: ClusterIP
  ports:
    - port: 6565
      targetPort: asity-grpc
  selector:
    app: asity